============================
Contributing to NiBetaSeries
============================

Welcome to the NiBetaSeries repository! We're excited you're here and want to contribute.

Practical guide to submitting your contribution
-----------------------------------------------

These guidelines are designed to make it as easy as possible to get involved.
If you have any questions that aren't discussed below, please let us know by opening an issue_!

Before you start you'll need to set up a free GitHub_ account and sign in. Here are some instructions_.

Labels
~~~~~~

The current list of labels are here_ and include:

* .. image:: https://img.shields.io/badge/-help%20wanted-159818.svg
     :target: `help_wanted`_
     :alt: help wanted!

    If you feel that you can contribute to one of these issues, we especially encourage you to do so!

* .. image:: https://img.shields.io/badge/-bugs-fc2929.svg
     :target: issue_
     :alt: bugs

    *These issues point to problems in the project.*
    If you find new a bug, please give as much detail as possible in your issue, including steps to recreate the error.
    If you experience the same bug as one already listed, please add any additional information that you have as a comment.

* .. image:: https://img.shields.io/badge/-feature-0052cc.svg
     :target: feature_
    *These issues are asking for new features to be added to the project.*

    Please try to make sure that your requested feature is distinct from any others that have already been requested or implemented.
    If you find one that's similar but there are subtle differences please reference the other request in your issue.

Making a change
---------------

We appreciate all contributions to NiBetaSeries, but those accepted fastest will follow a workflow similar to the following:

**1. Comment on an existing issue or open a new issue referencing your addition.**

This allows other members of the NiBetaSeries development team to confirm that you aren't 
overlapping with work that's currently underway and that everyone is on the same page
with the goal of the work you're going to carry out.

This blog_ is a nice explanation of why putting this work in up front is so useful to everyone involved.

**2.** Fork_ **the** NiBetaSeries_ **repository to your profile.**

This is now your own unique copy of NiBetaSeries.
Changes here won't effect anyone else's work, so it's a safe space to explore edits to the code!

Make sure to `keep your fork up to date`_ with the master repository.

**3. Make the changes you've discussed, following the** `NiBetaSeries coding style guide`_

Try to keep the changes focused. If you feel tempted to "branch out" then please make a `new branch`_.
It can also be helpful to test your changes locally, using an `NiBetaSeries development environment`_.

**4. Submit a** `pull request`_.


A member of the development team will review your changes to confirm that they can be merged into the main codebase.


NiBetaSeries coding style guide
-------------------------------

Whenever possible, instances of Nodes and Workflows should use the same names
as the variables they are assigned to.
This makes it easier to relate the content of the working directory to the code
that generated it when debugging.

Workflow variables should end in `_wf` to indicate that they refer to Workflows
and not Nodes.
For instance, a workflow whose basename is `myworkflow` might be defined as
follows::

    from nipype.pipeline import engine as pe

    myworkflow_wf = pe.Workflow(name='myworkflow_wf')


If a workflow is generated by a function, the name of the function should take
the form `init_<basename>_wf`::

    def init_myworkflow_wf(name='myworkflow_wf):
        workflow = pe.Workflow(name=name)
        ...
        return workflow

    myworkflow_wf = init_workflow_wf(name='myworkflow_wf')


If multiple instances of the same workflow might be instantiated in the same
namespace, the workflow names and variables should include either a numeric
identifier or a one-word description, such as::

    myworkflow0_wf = init_workflow_wf(name='myworkflow0_wf')
    myworkflow1_wf = init_workflow_wf(name='myworkflow1_wf')

    # or

    myworkflow_lh_wf = init_workflow_wf(name='myworkflow_lh_wf')
    myworkflow_rh_wf = init_workflow_wf(name='myworkflow_rh_wf')


Recognizing contributions
-------------------------

We welcome and recognize all contributions from documentation to testing to code development.
You can see a list of current contributors in our [zenodo file][link_zenodo].
If you are new to the project, don't forget to add your name and affiliation there!

Thank you!
----------

You're awesome. :wave::smiley:

<br>

*&mdash; Based on contributing guidelines from the [STEMMRoleModels][link_stemmrolemodels] project.*

.. _Github: https://github.com/
.. _NiBetaSeries: https://github.com/HBClab/NiBetaSeries
.. _instructions: https://help.github.com/articles/signing-up-for-a-new-github-account
.. _issue: https://github.com/HBClab/NiBetaSeries/issues
.. _here: https://github.com/HBClab/NiBetaSeries/labels
.. _`help wanted`: https://github.com/HBClabries/labels/help%20wanted
.. _feature: https://github.com/HBClab/NiBetaSeries/labels/feature

.. _`NiBetaSeries coding style guide`: https://github.com/HBClab/NiBetaSeries/blob/master/CONTRIBUTING.rst#NiBetaSeries-coding-style-guide
.. _`pull request`: https://help.github.com/articles/creating-a-pull-request/
.. _Fork: https://help.github.com/articles/fork-a-repo/
.. _blog: https://www.igvita.com/2011/12/19/dont-push-your-pull-requests/
.. _`new branch`: https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/
.. _`keep your fork up to date`: https://help.github.com/articles/syncing-a-fork/
.. _stemm: https://github.com/KirstieJane/STEMMRoleModels
.. _zenodo: https://github.com/HBClab/NiBetaSeries/blob/master/.zenodo.json
.. _`NiBetaSeries development environment`: http://NiBetaSeries.readthedocs.io/en/latest/contributors.html

Contributions are welcome, and they are greatly appreciated! Every
little bit helps, and credit will always be given.


Development
-----------

To set up `NiBetaSeries` for local development:

1. Fork `NiBetaSeries <https://github.com/HBClab/NiBetaSeries>`_
   (look for the "Fork" button).
2. Clone your fork locally::

    git clone git@github.com:your_name_here/NiBetaSeries.git

3. Create a branch for local development::

    git checkout -b name-of-your-bugfix-or-feature

   Now you can make your changes locally.

4. When you're done making changes, run all the checks, doc builder and spell checker with `tox <http://tox.readthedocs.io/en/latest/install.html>`_ one command::

    tox

5. Commit your changes and push your branch to GitHub::

    git add .
    git commit -m "Your detailed description of your changes."
    git push origin name-of-your-bugfix-or-feature

6. Submit a pull request through the GitHub website.

Pull Request Guidelines
-----------------------

If you need some code review or feedback while you're developing the code just make the pull request.

For merging, you should:

1. Include passing tests (run ``tox``) [1]_.
2. Update documentation when there's new API, functionality etc.
3. Add a note to ``CHANGELOG.rst`` about the changes.
4. Add yourself to ``AUTHORS.rst``.

.. [1] If you don't have all the necessary python versions available locally you can rely on Travis - it will
       `run the tests <https://travis-ci.org/HBClab/NiBetaSeries/pull_requests>`_ for each change you add in the pull request.

       It will be slower though ...

Tips
----

To run a subset of tests::

    tox -e envname -- pytest -k test_myfeature

To run all the test environments in *parallel* (you need to ``pip install detox``)::

    detox
